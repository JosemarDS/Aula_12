# -*- coding: utf-8 -*-
"""Aula_12

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j_PI-MlLMXRhraNBrx5LY1auArYaOHQr

CONJUNTOS EM PYTHON
Vimos:

Variáveis;

Listas  - list()

Tuplas - tuple()

Dicionário - dict()

Em Python, os conjuntos (sets) são  estruturas de dados que representam uma coleção de elementos únicos e não ordenados. Eles são úteis quando você precisa armazenar elementos sem duplicatas e não se preocupa com a ordem dos elementos. Aqui estão algumas operações e informações básicas sobre conjuntos em Python:
Criando um conjunto:

Você pode criar um conjunto usando **chaves {}** ou a **função set()**:
"""

frutas = {'maçã', 'banana', 'laranja'}
numeros = set([1, 2, 3, 4, 5])

dicionario =  {"key": "chave1", "key2":"chave2" }

"""A diferença entre dois conjuntos:"""

x = {1, 2, 3, 4}
d = {3, 4, 5, 6}

print(x.difference(d))
print(d.difference(x))

conjunto2 = {12,52,63,1,3,5}
conjunto3 = {12,63,5,2}

print(conjunto2.difference(conjunto3)) # o que eu tenho no 2, que não tenho no 3
print(conjunto3.difference(conjunto2)) # o que eu tenho no 3, que não tenho no 2

"""Adicionando elementos:
Você pode adicionar elementos a um conjunto usando o método **add()**:
"""

conjunto5 = {1,5,6}
conjunto5.add(8)
conjunto5.add('text')
conjunto5.add
print(conjunto5)

"""Removendo elementos:

Para remover elementos de um conjunto, você pode usar os métodos remove() ou discard(). A diferença é que remove() gera um erro se o elemento não estiver presente, enquanto discard() não gera erro:
"""

conjunto6 = {1,6,8,9}
conjunto6.remove(6)
print(conjunto6)

conjunto6 = {1,6,8,9}
conjunto6.discard(6)
print(conjunto6)

frutas.remove('maçã')
frutas.discard('pera')

"""Verificando a existência de elementos:
Você pode verificar se um elemento está em um conjunto usando o operador in:
"""

if 'banana' in frutas:
    print('Banana está na lista de frutas.')

"""Operações de conjuntos:


Python suporta várias operações de conjuntos, como união, interseção, diferença, etc., que podem ser úteis ao trabalhar com conjuntos. Por exemplo:

"""

conjunto7 = {1, 2, 3}
conjunto8 = {3, 4, 5}

# União
uniao = conjunto7.union(conjunto8)  # ou conjunto1 | conjunto2
print(uniao)
# Interseção
intersecao = conjunto7.intersection(conjunto8)  # ou conjunto1 & conjunto2
print(intersecao)
# Diferença
diferenca = conjunto7.difference(conjunto8)  # ou conjunto1 - conjunto2
print(diferenca)

"""**Iterando em um conjunto:**


Você pode iterar em um conjunto usando um loop `for`:
"""

for fruta in frutas:
    print(fruta)

"""**Tamanho de um conjunto:**

Para obter o número de elementos em um conjunto, você pode usar a função `len()`:
"""

tamanho = len(frutas)
print(tamanho)

conjunto9 = {9,8,7}

"""Os conjuntos em Python são muito úteis quando você precisa armazenar elementos únicos e realizar operações de conjunto, como verificação de pertinência, união e interseção. Eles são uma parte importante do arsenal de estruturas de dados em Python.

DIFERENÇA DE CONJUNTOS E DICIONÁRIOS

Em Python, tanto conjuntos (sets) quanto dicionários (dictionaries) são estruturas de dados que podem conter elementos distintos, mas eles têm finalidades diferentes e formatos distintos. Vou explicar as diferenças entre essas duas estruturas e como você pode usá-las:

**Conjuntos (Sets):**

1. Os conjuntos são coleções não ordenadas de elementos únicos.
2. Eles são definidos usando chaves `{}` ou a função `set()`.
3. Os elementos em um conjunto não têm uma ordem específica.
4. Conjuntos são usados quando você deseja armazenar elementos únicos e não precisa se preocupar com a ordem ou associar valores a chaves.

Exemplo de um conjunto:
"""

frutas = {'maçã', 'banana', 'laranja'}
print(frutas)

"""**Dicionários (Dictionaries):**

1. Os dicionários são coleções associativas que armazenam pares de chave-valor, onde cada chave é única.
2. Eles são definidos usando chaves `{}` com pares chave-valor separados por `:`.

Exemplo de um dicionário:
"""

pessoa = {'nome': 'João', 'idade': 30, 'cidade': 'São Paulo'}
print(pessoa)

"""A principal diferença entre conjuntos e dicionários é que os conjuntos armazenam apenas elementos únicos, enquanto os dicionários armazenam pares chave-valor, permitindo que você associe um valor (o valor) a uma chave única (a chave).

**Diferença de Conjuntos com Dicionários:**
Em alguns casos, você pode querer usar um conjunto de chaves de dicionário para realizar operações de conjunto, como interseção ou diferença. Por exemplo, suponha que você tenha dois dicionários e deseje encontrar as chaves comuns entre eles ou as chaves que são exclusivas de um dicionário em relação ao outro.

Aqui está um exemplo de como você pode usar conjuntos para encontrar a diferença entre as chaves de dois dicionários:
"""

dicionario1 = {'a': 1, 'b': 2, 'c': 3}
dicionario2 = {'b': 2, 'c': 4, 'd': 5}

chaves1 = set(dicionario1.keys())
chaves2 = set(dicionario2.keys())

# Chaves exclusivas em dicionario1 em relação a dicionario2
diferenca = chaves1 - chaves2

print(diferenca)  # Isso imprimirá {'a'}

"""Neste exemplo, convertemos as chaves de ambos os dicionários em conjuntos e, em seguida, usamos a operação de conjunto de diferença (-) para encontrar as chaves exclusivas em dicionario1 em relação a dicionario2.

ATIVIDADES:

1: Transforme uma lista em um conjunto
"""

planetas = ('terra', 'venus', 'marte')
print({planetas})

"""2: Una estes 2 conjuntos:"""

zone = {1, 2, 3, 4}
kwia = {3, 4, 5, 6}
#união:
uniao = zone.union(kwia)
print(uniao)

"""3: Verifique a diferença entre os conjuntos:"""

g1 = {12,3569,1,5,7}
g2 = {12,3569,2,5,8}
print(g1.difference(g2))
print(g2.difference(g1))

"""4: Crie um conjunto chamado "frutas" com as seguintes frutas: maçã, banana, laranja, pêra e abacaxi. Em seguida, imprima o número de elementos no conjunto."""



"""5: Crie dois conjuntos, "conjunto1" e "conjunto2", com alguns números inteiros. Imprima a união desses dois conjuntos"""



"""6: Dado o conjunto "cores" com cores diferentes, remova a cor "vermelho" do conjunto."""



"""7: Crie um conjunto chamado "numeros" com os números de 1 a 10.

Em seguida, crie um novo conjunto chamado "pares" contendo apenas os números pares do conjunto "numeros".
"""



"""8: Verifique se o conjunto "alunos_aprovados" contém todos os alunos do conjunto "todos_alunos". Os conjuntos devem ser definidos com nomes apropriados."""

